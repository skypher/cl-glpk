(push #p"./" asdf:*central-registry*)
(ql:quickload 'cl-glpk)

(in-package :cl-glpk)

(defun test1 ()
  (let ((lp (compute-linear-program
              :maximize '(+ (* 1 x))
              :subject-to '((<= (+ (* 1 x)) 5))
              :bounds '((>= x 1)))))
    (format t "*** solving ***~%")
    (format t "* with msglevel :default~%")
    (format t "~S~%" (multiple-value-list (simplex lp :output-level :default)))
    (format t "* with msglevel :none~%")
    (format t "~S~%" (multiple-value-list (simplex lp :output-level :none)))
    (format t "*** values ***~%")
    (format t "* objective~%")
    (format t "~D~%" (objective-value lp))
    (format t "* primal (1)~%")
    (format t "~D~%" (column-primal-value lp 1))))
